---
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
  appNamespacesTarget: ".*"
  runbookUrl: "https://runbooks.prometheus-operator.dev/runbooks"
additionalPrometheusRulesMap: {}
global:
  imagePullSecrets: []
alertmanager:
  enabled: true
  apiVersion: "v2"
  serviceAccount:
    create: true
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""
  config:
    global:
      resolve_timeout: "5m"
    route:
      group_by:
      - "job"
      group_wait: "30s"
      group_interval: "5m"
      repeat_interval: "12h"
      receiver: "null"
      routes:
      - match:
          alertname: "Watchdog"
        receiver: "null"
    receivers:
    - name: "null"
    templates:
    - "/etc/alertmanager/config/*.tmpl"
  tplConfig: false
  templateFiles: {}
  ingress:
    enabled: false
  secret:
    annotations: {}
  service:
    port: 9093
    targetPort: 9093
    type: "ClusterIP"
  serviceMonitor:
    selfMonitor: true
  alertmanagerSpec:
    image:
      repository: "insecure.docker.registry.local:80/docker.io/quay.io/prometheus/alertmanager"
      tag: "v0.23.0"
      sha: ""
    logFormat: "logfmt"
    logLevel: "info"
    replicas: 1
    retention: "120h"
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "standard"
          accessModes:
          - "ReadWriteOnce"
          resources:
            requests:
              storage: "10Gi"
    externalUrl: null
    routePrefix: "/"
    paused: false
grafana:
  enabled: true
  image:
    repository: "insecure.docker.registry.local:80/docker.io/grafana/grafana"
    tag: "8.3.5"
    pullPolicy: "IfNotPresent"
  testFramework:
    enabled: true
    image: "insecure.docker.registry.local:80/docker.io/bats/bats"
    tag: "v1.4.1"
    imagePullPolicy: "IfNotPresent"
  downloadDashboardsImage:
    repository: "insecure.docker.registry.local:80/docker.io/curlimages/curl"
    tag: "7.73.0"
    pullPolicy: "IfNotPresent"
  persistence:
    type: "pvc"
    enabled: true
    storageClassName: "standard"
    accessModes:
    - "ReadWriteOnce"
    size: "1Gi"
    inMemory:
      enabled: false
  initChownData:
    enabled: true
    image:
      repository: "insecure.docker.registry.local:80/docker.io/busybox"
      tag: "1.31.1"
      pullPolicy: "IfNotPresent"
  defaultDashboardsTimezone: "browser"
  adminPassword: "prom-operator"
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/issuer: "self-signed-issuer"
    className: ""
    path: "/"
    pathtype: "ImplementationSpecific"
    hosts:
    - "grafana.local"
    tls:
    - secretName: "grafana.local-tls"
      hosts:
      - "grafana.local"
  sidecar:
    image:
      repository: "insecure.docker.registry.local:80/docker.io/quay.io/kiwigrid/k8s-sidecar"
      tag: "1.15.1"
    imagePullPolicy: "IfNotPresent"
    dashboards:
      enabled: true
      label: "grafana_dashboard"
      labelValue: "1"
      annotations: {}
      multicluster:
        global:
          enabled: false
        etcd:
          enabled: false
      provider:
        allowUiUpdates: false
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
      label: "grafana_datasource"
      labelValue: "1"
  imageRenderer:
    enabled: false
    replicas: 1
    image:
      repository: "insecure.docker.registry.local:80/docker.io/grafana/grafana-image-renderer"
      tag: "3.4.0"
      pullPolicy: "IfNotPresent"
  service:
    portName: "http-web"
  serviceMonitor:
    enabled: true
    path: "/metrics"
    labels: {}
    interval: ""
    scheme: "http"
    tlsConfig: {}
    scrapeTimeout: "30s"
    relabelings: []
kubeApiServer:
  enabled: true
  tlsConfig:
    serverName: "kubernetes"
    insecureSkipVerify: false
  serviceMonitor:
    interval: ""
    proxyUrl: ""
    jobLabel: "component"
    selector:
      matchLabels:
        component: "apiserver"
        provider: "kubernetes"
    metricRelabelings: []
    relabelings: []
kubelet:
  enabled: true
  namespace: "kube-system"
  serviceMonitor:
    interval: ""
    proxyUrl: ""
    https: true
    cAdvisor: true
    probes: true
    resource: false
    resourcePath: "/metrics/resource"
    cAdvisorMetricRelabelings: []
    probesMetricRelabelings: []
    cAdvisorRelabelings:
    - sourceLabels:
      - "__metrics_path__"
      targetLabel: "metrics_path"
    probesRelabelings:
    - sourceLabels:
      - "__metrics_path__"
      targetLabel: "metrics_path"
    resourceRelabelings:
    - sourceLabels:
      - "__metrics_path__"
      targetLabel: "metrics_path"
    metricRelabelings: []
    relabelings:
    - sourceLabels:
      - "__metrics_path__"
      targetLabel: "metrics_path"
kubeControllerManager:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: ""
    proxyUrl: ""
    https: null
    insecureSkipVerify: null
    serverName: null
    metricRelabelings: []
    relabelings: []
coreDns:
  enabled: true
  service:
    port: 9153
    targetPort: 9153
  serviceMonitor:
    interval: ""
    proxyUrl: ""
    metricRelabelings: []
    relabelings: []
kubeDns:
  enabled: false
  service:
    dnsmasq:
      port: 10054
      targetPort: 10054
    skydns:
      port: 10055
      targetPort: 10055
  serviceMonitor:
    interval: ""
    proxyUrl: ""
    metricRelabelings: []
    relabelings: []
    dnsmasqMetricRelabelings: []
    dnsmasqRelabelings: []
kubeEtcd:
  enabled: true
  endpoints: []
  service:
    enabled: true
    port: 2379
    targetPort: 2379
    selector:
      component: "etcd"
  serviceMonitor:
    enabled: true
    interval: ""
    proxyUrl: ""
    scheme: "http"
    insecureSkipVerify: false
    serverName: ""
    caFile: ""
    certFile: ""
    keyFile: ""
    metricRelabelings: []
    relabelings: []
kubeScheduler:
  enabled: true
  endpoints: []
  service:
    enabled: true
    port: 10259
    targetPort: 10259
    selector:
      component: "kube-scheduler"
  serviceMonitor:
    enabled: true
    interval: ""
    proxyUrl: ""
    https: true
    insecureSkipVerify: null
    serverName: null
    metricRelabelings: []
    relabelings: []
kubeProxy:
  enabled: true
  endpoints: []
  service:
    enabled: true
    port: 10249
    targetPort: 10249
  serviceMonitor:
    enabled: true
    interval: ""
    proxyUrl: ""
    https: false
    metricRelabelings: []
    relabelings: []
kubeStateMetrics:
  enabled: true
kube-state-metrics:
  image:
    repository: "insecure.docker.registry.local:80/docker.io/k8s.gcr.io/kube-state-metrics/kube-state-metrics"
    tag: "v2.3.0"
    pullPolicy: "IfNotPresent"
  rbac:
    create: true
  releaseLabel: true
  prometheus:
    monitor:
      enabled: true
      interval: ""
      scrapeTimeout: ""
      proxyUrl: ""
      honorLabels: true
      metricRelabelings: []
      relabelings: []
  selfMonitor:
    enabled: false
nodeExporter:
  enabled: true
prometheus-node-exporter:
  image:
    repository: "insecure.docker.registry.local:80/docker.io/quay.io/prometheus/node-exporter"
    tag: "v1.3.1"
    pullPolicy: "IfNotPresent"
  service:
    type: "ClusterIP"
    port: 9100
    targetPort: 9100
    portName: "http-metrics"
    listenOnAllInterfaces: true
    annotations:
      prometheus.io/scrape: "true"
  podLabels:
    jobLabel: "node-exporter"
  extraArgs:
  - "--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)"
  - "--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
  prometheus:
    monitor:
      enabled: true
      jobLabel: "jobLabel"
      interval: ""
      scrapeTimeout: ""
      proxyUrl: ""
      metricRelabelings: []
      relabelings: []
  rbac:
    pspEnabled: false
prometheusOperator:
  enabled: true
  tls:
    enabled: true
    tlsMinVersion: "VersionTLS13"
    internalPort: 10250
  admissionWebhooks:
    failurePolicy: "Fail"
    enabled: true
    caBundle: ""
    patch:
      enabled: true
      image:
        repository: "insecure.docker.registry.local:80/docker.io/k8s.gcr.io/ingress-nginx/kube-webhook-certgen"
        tag: "v1.0"
        sha: ""
        pullPolicy: "IfNotPresent"
      resources: {}
      priorityClassName: ""
    certManager:
      enabled: false
      rootCert:
        duration: ""
      admissionCert:
        duration: ""
  namespaces: {}
  denyNamespaces: []
  alertmanagerInstanceNamespaces: []
  prometheusInstanceNamespaces: []
  thanosRulerInstanceNamespaces: []
  serviceAccount:
    create: true
  service:
    type: "ClusterIP"
  podLabels: {}
  logFormat: "logfmt"
  kubeletService:
    enabled: true
    namespace: "kube-system"
    name: ""
  serviceMonitor:
    interval: ""
    scrapeTimeout: ""
    selfMonitor: true
    metricRelabelings: []
    relabelings: []
  image:
    repository: "insecure.docker.registry.local:80/docker.io/quay.io/prometheus-operator/prometheus-operator"
    tag: "v0.54.0"
    sha: ""
    pullPolicy: "IfNotPresent"
  prometheusConfigReloader:
    image:
      repository: "insecure.docker.registry.local:80/docker.io/quay.io/prometheus-operator/prometheus-config-reloader"
      tag: "v0.54.0"
      sha: ""
    resources:
      requests:
        cpu: "100m"
        memory: "50Mi"
      limits:
        cpu: "100m"
        memory: "200Mi"
  thanosImage:
    repository: "insecure.docker.registry.local:80/docker.io/quay.io/thanos/thanos"
    tag: "v0.24.0"
    sha: ""
prometheus:
  enabled: true
  serviceAccount:
    create: true
  thanosService:
    enabled: false
  thanosServiceMonitor:
    enabled: false
  thanosServiceExternal:
    enabled: false
  service:
    port: 9090
    targetPort: 9090
    type: "ClusterIP"
  servicePerReplica:
    enabled: false
  podDisruptionBudget:
    enabled: false
  thanosIngress:
    enabled: false
  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "self-signed-issuer"
    ingressClassName: "nginx"
    paths:
    - "/"
    pathtype: "ImplementationSpecific"
    hosts:
    - "prometheus.local"
    tls:
    - secretName: "prometheus.local-tls"
      hosts:
      - "prometheus.local"
  ingressPerReplica:
    enabled: false
  serviceMonitor:
    interval: ""
    selfMonitor: true
    scheme: ""
    tlsConfig: {}
    bearerTokenFile: null
    metricRelabelings: []
    relabelings: []
  prometheusSpec:
    disableCompaction: false
    apiserverConfig: {}
    scrapeInterval: ""
    scrapeTimeout: ""
    evaluationInterval: ""
    listenLocal: false
    enableAdminAPI: false
    web: {}
    enableFeatures: []
    image:
      repository: "insecure.docker.registry.local:80/docker.io/quay.io/prometheus/prometheus"
      tag: "v2.33.1"
      sha: ""
    alertingEndpoints: []
    externalLabels: {}
    replicaExternalLabelName: ""
    replicaExternalLabelNameClear: false
    prometheusExternalLabelName: ""
    prometheusExternalLabelNameClear: false
    externalUrl: ""
    query: {}
    ruleNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: true
    ruleSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: true
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: true
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    probeSelectorNilUsesHelmValues: true
    probeSelector: {}
    probeNamespaceSelector: {}
    retention: "10d"
    retentionSize: ""
    walCompression: false
    paused: false
    replicas: 1
    shards: 1
    logLevel: "info"
    logFormat: "logfmt"
    routePrefix: "/"
    podMetadata: {}
    remoteRead: []
    additionalRemoteRead: []
    remoteWrite: []
    additionalRemoteWrite: []
    remoteWriteDashboards: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "standard"
          accessModes:
          - "ReadWriteOnce"
          resources:
            requests:
              storage: "10Gi"
    additionalScrapeConfigs: []
    additionalScrapeConfigsSecret: {}
    additionalPrometheusSecretsAnnotations: {}
    additionalAlertManagerConfigs: []
    additionalAlertManagerConfigsSecret: {}
    additionalAlertRelabelConfigs: []
    priorityClassName: ""
    thanos: {}
    containers: []
    initContainers: []
    portName: "http-web"
    arbitraryFSAccessThroughSMs: false
    overrideHonorLabels: false
    overrideHonorTimestamps: false
    ignoreNamespaceSelectors: false
    enforcedNamespaceLabel: ""
    prometheusRulesExcludedFromEnforce: []
    queryLogFile: false
    enforcedSampleLimit: false
    enforcedTargetLimit: false
    enforcedLabelLimit: false
    enforcedLabelNameLengthLimit: false
    enforcedLabelValueLengthLimit: false
    allowOverlappingBlocks: false
  additionalRulesForClusterRole: []
  additionalServiceMonitors: []
  additionalPodMonitors: []
