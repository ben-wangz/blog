apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  params:
    - name: url
      type: string
      description: git url to clone
    - name: revision
      description: git revision to checkout (branch, tag, sha, refâ€¦)
      type: string
      default: main
    - name: sslVerify
      description: defines if http.sslVerify should be set to true or false in the global git config
      type: string
      default: "true"
    - name: deleteExisting
      description: clean out the contents of the repo's destination directory (if it already exists)
      type: string
      default: "false"
  workspaces:
    - name: code
      description: path for git clone
      mountPath: /app/blog
    - name: git-ssh-keys
      description: ssh keys for git
      mountPath: /app/git-ssh-keys
  results:
    - name: git-commit-id
      description: commit id of git repo cloned
  steps:
    - name: git-clone
      image: insecure.docker.registry.local:80/docker.io/bitnami/git:2.35.1-debian-10-r44
      env:
        - name: TZ
          value: "Asia/Shanghai"
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: CODE_PATH
          value: $(workspaces.code.path)
        - name: SSH_KEYS_PATH
          value: $(workspaces.git-ssh-keys.path)
        - name: GIT_COMMIT_ID_PATH
          value: $(results.git-commit-id.path)
      script: |
        #!/usr/bin/env bash

        set -x
        set -e
        CHECKOUT_PATH="${CODE_PATH}"
        cleandir() {
          if [[ -d "$CHECKOUT_PATH" ]] ; then
            rm -rf "$CHECKOUT_PATH"/*
            rm -rf "$CHECKOUT_PATH"/.[!.]*
            rm -rf "$CHECKOUT_PATH"/..?*
          fi
        }
        if [[ "${PARAM_DELETE_EXISTING}" == "true" ]] ; then
          cleandir
        fi
        export GIT_SSH_COMMAND="ssh -i $SSH_KEYS_PATH/id_rsa -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
        git clone --single-branch --branch $PARAM_REVISION $PARAM_URL $CHECKOUT_PATH
        cd $CHECKOUT_PATH && (git rev-parse --short HEAD | tee $GIT_COMMIT_ID_PATHS)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: release-docker-image
spec:
  workspaces:
    - name: code
      description: path for git clone
      mountPath: /app/blog
  volumes:
    - name: dind-storage
      emptyDir: { }
    - name: dind-socket
      emptyDir: { }
  sidecars:
    - image: docker.io/docker:20.10.13-dind-alpine3.15
      name: dockerd
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/docker
          name: dind-storage
        - mountPath: /var/run/
          name: dind-socket
        - name: $(workspaces.code.volume)
          mountPath: $(workspaces.code.path)
  steps:
    - name: build-and-push
      image: insecure.docker.registry.local:80/docker.io/docker:20.10.13-dind-alpine3.15
      volumeMounts:
        - mountPath: /var/run/
          name: dind-socket
      env:
        - name: TZ
          value: "Asia/Shanghai"
        - name: CODE_PATH
          value: $(workspaces.code.path)
      script: |
        sleep 10m

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-demo
spec:
  params:
    - name: image-registry
      default: insecure.docker.registry.local:80
  workspaces:
    - name: git-source
    - name: git-ssh-keys
  tasks:
    - name: fetch-from-git
      taskRef:
        name: git-clone
      params:
        - name: url
          value: git@github.com:ben-wangz/blog.git
        - name: revision
          value: main
      workspaces:
        - name: code
          workspace: git-source
        - name: git-ssh-keys
          workspace: git-ssh-keys
    - name: release-docker-image
      runAfter:
        - fetch-from-git
      taskRef:
        name: release-docker-image
      workspaces:
        - name: code
          workspace: git-source
